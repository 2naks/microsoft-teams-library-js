{"version":3,"sources":["webpack://microsoftTeams/webpack/universalModuleDefinition","webpack://microsoftTeams/webpack/bootstrap","webpack://microsoftTeams/./src/internal/globalVars.ts","webpack://microsoftTeams/./src/internal/internalAPIs.ts","webpack://microsoftTeams/./src/internal/constants.ts","webpack://microsoftTeams/./src/internal/utils.ts","webpack://microsoftTeams/./src/public/publicAPIs.ts","webpack://microsoftTeams/./src/public/settings.ts","webpack://microsoftTeams/./src/public/appWindow.ts","webpack://microsoftTeams/./src/index.ts","webpack://microsoftTeams/./src/private/index.ts","webpack://microsoftTeams/./src/private/menus.ts","webpack://microsoftTeams/./src/private/privateAPIs.ts","webpack://microsoftTeams/./src/private/conversations.ts","webpack://microsoftTeams/./src/public/index.ts","webpack://microsoftTeams/./src/public/authentication.ts","webpack://microsoftTeams/./src/public/tasks.ts"],"names":[],"mappings":"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","file":"MicrosoftTeams.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"microsoftTeams\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"microsoftTeams\"] = factory();\n\telse\n\t\troot[\"microsoftTeams\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","import { MessageRequest } from \"./interfaces\";\nexport class GlobalVars {\n  public static initializeCalled = false;\n  public static currentWindow: Window | any;\n  public static parentWindow: Window | any;\n  public static isFramelessWindow = false;\n  public static parentOrigin: string;\n  public static frameContext: string;\n  public static childWindow: Window;\n  public static childOrigin: string;\n  public static parentMessageQueue: MessageRequest[] = [];\n  public static childMessageQueue: MessageRequest[] = [];\n  public static nextMessageId = 0;\n  public static handlers: {\n    [func: string]: Function;\n  } = {};\n  public static callbacks: {\n    [id: number]: Function;\n  } = {};\n  public static hostClientType: string;\n  public static printCapabilityEnabled: boolean = false;\n  public static themeChangeHandler: (theme: string) => void;\n  public static fullScreenChangeHandler: (isFullScreen: boolean) => void;\n  public static backButtonPressHandler: () => boolean;\n  public static beforeUnloadHandler: (readyToUnload: () => void) => boolean;\n  public static changeSettingsHandler: () => void;\n  public static onStartConversationHandler: (sunEntityId: string, conversationId: string) => void;\n  public static onCloseConversationHandler: (sunEntityId: string, conversationId?: string) => void;\n}","import { navigateBack } from \"../public/publicAPIs\";\nimport { validOriginRegExp } from \"./constants\";\nimport { GlobalVars } from \"./globalVars\";\nimport { MessageResponse, MessageRequest, ExtendedWindow, MessageEvent } from \"./interfaces\";\n\n// ::::::::::::::::::::MicrosoftTeams SDK Internal :::::::::::::::::\nGlobalVars.handlers[\"themeChange\"] = handleThemeChange;\nGlobalVars.handlers[\"fullScreenChange\"] = handleFullScreenChange;\nGlobalVars.handlers[\"backButtonPress\"] = handleBackButtonPress;\nGlobalVars.handlers[\"beforeUnload\"] = handleBeforeUnload;\nGlobalVars.handlers[\"changeSettings\"] = handleChangeSettings;\nGlobalVars.handlers[\"startConversation\"] = handleStartConversation;\nGlobalVars.handlers[\"closeConversation\"] = handleCloseConversation;\n\nfunction handleStartConversation(subEntityId: string, conversationId: string): void {\n  if (GlobalVars.onStartConversationHandler) {\n    GlobalVars.onStartConversationHandler(subEntityId, conversationId);\n  }\n}\n\nfunction handleCloseConversation(subEntityId: string, conversationId?: string): void {\n  if (GlobalVars.onCloseConversationHandler) {\n    GlobalVars.onCloseConversationHandler(subEntityId, conversationId);\n  }\n}\n\nfunction handleThemeChange(theme: string): void {\n  if (GlobalVars.themeChangeHandler) {\n    GlobalVars.themeChangeHandler(theme);\n  }\n\n  if (GlobalVars.childWindow) {\n    sendMessageRequest(GlobalVars.childWindow, \"themeChange\", [theme]);\n  }\n}\n\nfunction handleFullScreenChange(isFullScreen: boolean): void {\n  if (GlobalVars.fullScreenChangeHandler) {\n    GlobalVars.fullScreenChangeHandler(isFullScreen);\n  }\n}\n\nfunction handleBackButtonPress(): void {\n  if (!GlobalVars.backButtonPressHandler || !GlobalVars.backButtonPressHandler()) {\n    navigateBack();\n  }\n}\n\nfunction handleBeforeUnload(): void {\n  const readyToUnload = () => {\n    sendMessageRequest(GlobalVars.parentWindow, \"readyToUnload\", []);\n  };\n\n  if (!GlobalVars.beforeUnloadHandler || !GlobalVars.beforeUnloadHandler(readyToUnload)) {\n    readyToUnload();\n  }\n}\n\nfunction handleChangeSettings(): void {\n  if (GlobalVars.changeSettingsHandler) {\n    GlobalVars.changeSettingsHandler();\n  }\n}\n\nexport function ensureInitialized(...expectedFrameContexts: string[]): void {\n  if (!GlobalVars.initializeCalled) {\n    throw new Error(\"The library has not yet been initialized\");\n  }\n\n  if (\n    GlobalVars.frameContext &&\n    expectedFrameContexts &&\n    expectedFrameContexts.length > 0\n  ) {\n    let found = false;\n    for (let i = 0; i < expectedFrameContexts.length; i++) {\n      if (expectedFrameContexts[i] === GlobalVars.frameContext) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      throw new Error(\n        \"This call is not allowed in the '\" + GlobalVars.frameContext + \"' context\"\n      );\n    }\n  }\n}\n\nexport function processMessage(evt: MessageEvent): void {\n  // Process only if we received a valid message\n  if (!evt || !evt.data || typeof evt.data !== \"object\") {\n    return;\n  }\n\n  // Process only if the message is coming from a different window and a valid origin\n  const messageSource = evt.source || evt.originalEvent.source;\n  const messageOrigin = evt.origin || evt.originalEvent.origin;\n  if (\n    messageSource === GlobalVars.currentWindow ||\n    (messageOrigin !== GlobalVars.currentWindow.location.origin &&\n      !validOriginRegExp.test(messageOrigin.toLowerCase()))\n  ) {\n    return;\n  }\n\n  // Update our parent and child relationships based on this message\n  updateRelationships(messageSource, messageOrigin);\n\n  // Handle the message\n  if (messageSource === GlobalVars.parentWindow) {\n    handleParentMessage(evt);\n  } else if (messageSource === GlobalVars.childWindow) {\n    handleChildMessage(evt);\n  }\n}\n\nfunction updateRelationships(\n  messageSource: Window,\n  messageOrigin: string\n): void {\n  // Determine whether the source of the message is our parent or child and update our\n  // window and origin pointer accordingly\n  if (!GlobalVars.parentWindow || messageSource === GlobalVars.parentWindow) {\n    GlobalVars.parentWindow = messageSource;\n    GlobalVars.parentOrigin = messageOrigin;\n  } else if (!GlobalVars.childWindow || messageSource === GlobalVars.childWindow) {\n    GlobalVars.childWindow = messageSource;\n    GlobalVars.childOrigin = messageOrigin;\n  }\n\n  // Clean up pointers to closed parent and child windows\n  if (GlobalVars.parentWindow && GlobalVars.parentWindow.closed) {\n    GlobalVars.parentWindow = null;\n    GlobalVars.parentOrigin = null;\n  }\n  if (GlobalVars.childWindow && GlobalVars.childWindow.closed) {\n    GlobalVars.childWindow = null;\n    GlobalVars.childOrigin = null;\n  }\n\n  // If we have any messages in our queue, send them now\n  flushMessageQueue(GlobalVars.parentWindow);\n  flushMessageQueue(GlobalVars.childWindow);\n}\n\nexport function handleParentMessage(evt: MessageEvent): void {\n  if (\"id\" in evt.data) {\n    // Call any associated GlobalVars.callbacks\n    const message = evt.data as MessageResponse;\n    const callback = GlobalVars.callbacks[message.id];\n    if (callback) {\n      callback.apply(null, message.args);\n\n      // Remove the callback to ensure that the callback is called only once and to free up memory.\n      delete GlobalVars.callbacks[message.id];\n    }\n  } else if (\"func\" in evt.data) {\n    // Delegate the request to the proper handler\n    const message = evt.data as MessageRequest;\n    const handler = GlobalVars.handlers[message.func];\n    if (handler) {\n      // We don't expect any handler to respond at this point\n      handler.apply(this, message.args);\n    }\n  }\n}\n\nfunction handleChildMessage(evt: MessageEvent): void {\n  if (\"id\" in evt.data && \"func\" in evt.data) {\n    // Try to delegate the request to the proper handler\n    const message = evt.data as MessageRequest;\n    const handler = GlobalVars.handlers[message.func];\n    if (handler) {\n      const result = handler.apply(this, message.args);\n      if (result) {\n        sendMessageResponse(\n          GlobalVars.childWindow,\n          message.id,\n          Array.isArray(result) ? result : [result]\n        );\n      }\n    } else {\n      // Proxy to parent\n      const messageId = sendMessageRequest(\n        GlobalVars.parentWindow,\n        message.func,\n        message.args\n      );\n\n      // tslint:disable-next-line:no-any\n      GlobalVars.callbacks[messageId] = (...args: any[]) => {\n        if (GlobalVars.childWindow) {\n          sendMessageResponse(GlobalVars.childWindow, message.id, args);\n        }\n      };\n    }\n  }\n}\n\nfunction getTargetMessageQueue(targetWindow: Window): MessageRequest[] {\n  return targetWindow === GlobalVars.parentWindow\n    ? GlobalVars.parentMessageQueue\n    : targetWindow === GlobalVars.childWindow\n      ? GlobalVars.childMessageQueue\n      : [];\n}\n\nfunction getTargetOrigin(targetWindow: Window): string {\n  return targetWindow === GlobalVars.parentWindow\n    ? GlobalVars.parentOrigin\n    : targetWindow === GlobalVars.childWindow\n      ? GlobalVars.childOrigin\n      : null;\n}\n\nfunction flushMessageQueue(targetWindow: Window | any): void {\n  const targetOrigin = getTargetOrigin(targetWindow);\n  const targetMessageQueue = getTargetMessageQueue(targetWindow);\n  while (targetWindow && targetOrigin && targetMessageQueue.length > 0) {\n    targetWindow.postMessage(targetMessageQueue.shift(), targetOrigin);\n  }\n}\n\nexport function waitForMessageQueue(targetWindow: Window, callback: () => void): void {\n  const messageQueueMonitor = GlobalVars.currentWindow.setInterval(() => {\n    if (getTargetMessageQueue(targetWindow).length === 0) {\n      clearInterval(messageQueueMonitor);\n      callback();\n    }\n  }, 100);\n}\n\nexport function sendMessageRequest(\n  targetWindow: Window | any,\n  actionName: string,\n  // tslint:disable-next-line: no-any\n  args?: any[]\n): number {\n  const request = createMessageRequest(actionName, args);\n  if (GlobalVars.isFramelessWindow) {\n    if (GlobalVars.currentWindow && GlobalVars.currentWindow.nativeInterface) {\n      (GlobalVars.currentWindow as ExtendedWindow).nativeInterface.framelessPostMessage(\n        JSON.stringify(request)\n      );\n    }\n  } else {\n    const targetOrigin = getTargetOrigin(targetWindow);\n\n    // If the target window isn't closed and we already know its origin, send the message right away; otherwise,\n    // queue the message and send it after the origin is established\n    if (targetWindow && targetOrigin) {\n      targetWindow.postMessage(request, targetOrigin);\n    } else {\n      getTargetMessageQueue(targetWindow).push(request);\n    }\n  }\n  return request.id;\n}\n\nfunction sendMessageResponse(\n  targetWindow: Window | any,\n  id: number,\n  // tslint:disable-next-line:no-any\n  args?: any[]\n): void {\n  const response = createMessageResponse(id, args);\n  const targetOrigin = getTargetOrigin(targetWindow);\n  if (targetWindow && targetOrigin) {\n    targetWindow.postMessage(response, targetOrigin);\n  }\n}\n\n// tslint:disable-next-line:no-any\nfunction createMessageRequest(func: string, args: any[]): MessageRequest {\n  return {\n    id: GlobalVars.nextMessageId++,\n    func: func,\n    args: args || []\n  };\n}\n\n// tslint:disable-next-line:no-any\nfunction createMessageResponse(id: number, args: any[]): MessageResponse {\n  return {\n    id: id,\n    args: args || []\n  };\n}","import { generateRegExpFromUrls } from \"./utils\"\n\nexport const version = \"1.5.0-beta.1\"\n\nexport const validOrigins = [\n  \"https://teams.microsoft.com\",\n  \"https://teams.microsoft.us\",\n  \"https://gov.teams.microsoft.us\",\n  \"https://dod.teams.microsoft.us\",\n  \"https://int.teams.microsoft.com\",\n  \"https://devspaces.skype.com\",\n  \"https://ssauth.skype.com\",\n  \"http://dev.local\", // local development\n  \"http://dev.local:8080\", // local development\n  \"https://msft.spoppe.com\",\n  \"https://*.sharepoint.com\",\n  \"https://*.sharepoint-df.com\",\n  \"https://*.sharepointonline.com\",\n  \"https://outlook.office.com\",\n  \"https://outlook-sdf.office.com\"\n]\n\n// Ensure these declarations stay in sync with the framework.\nexport const frameContexts = {\n  settings: \"settings\",\n  content: \"content\",\n  authentication: \"authentication\",\n  remove: \"remove\",\n  task: \"task\"\n}\n\nexport const validOriginRegExp = generateRegExpFromUrls(validOrigins)\n","import { GlobalVars } from \"./globalVars\";\n\n// This will return a reg expression a given url\nfunction generateRegExpFromUrl(url: string): string {\n  let urlRegExpPart = \"^\";\n  const urlParts = url.split(\".\");\n  for (let j = 0; j < urlParts.length; j++) {\n    urlRegExpPart += (j > 0 ? \"[.]\" : \"\") + urlParts[j].replace(\"*\", \"[^/^.]+\");\n  }\n  urlRegExpPart += \"$\";\n  return urlRegExpPart;\n}\n\n// This will return a reg expression for list of url\nexport function generateRegExpFromUrls(urls: string[]): RegExp {\n  let urlRegExp = \"\";\n  for (let i = 0; i < urls.length; i++) {\n    urlRegExp += (i === 0 ? \"\" : \"|\") + generateRegExpFromUrl(urls[i]);\n  }\n  return new RegExp(urlRegExp);\n}\n\nexport function getGenericOnCompleteHandler(errorMessage?: string): (success: boolean, reason?: string) => void {\n  return (success: boolean, reason: string) => {\n    if (!success) {\n      throw new Error(errorMessage ? errorMessage : reason);\n    }\n  };\n}","import { processMessage, ensureInitialized, sendMessageRequest, handleParentMessage } from \"../internal/internalAPIs\";\nimport { GlobalVars } from \"../internal/globalVars\";\nimport { version, frameContexts } from \"../internal/constants\";\nimport { ExtendedWindow, MessageEvent } from \"../internal/interfaces\";\nimport { settings } from \"./settings\";\nimport { TabInformation, TabInstanceParameters, TabInstance, DeepLinkParameters, Context } from \"./interfaces\";\nimport { getGenericOnCompleteHandler } from \"../internal/utils\";\n\n// ::::::::::::::::::::::: MicrosoftTeams SDK public API ::::::::::::::::::::\n/**\n * Initializes the library. This must be called before any other SDK calls\n * but after the frame is loaded successfully.\n */\nexport function initialize(hostWindow: any = window): void {\n  if (GlobalVars.initializeCalled) {\n    // Independent components might not know whether the SDK is initialized so might call it to be safe.\n    // Just no-op if that happens to make it easier to use.\n    return;\n  }\n\n  GlobalVars.initializeCalled = true;\n\n\n  // Undocumented field used to mock the window for unit tests\n  GlobalVars.currentWindow = hostWindow;\n\n  // Listen for messages post to our window\n  const messageListener = (evt: MessageEvent) => processMessage(evt);\n\n  // If we are in an iframe, our parent window is the one hosting us (i.e., window.parent); otherwise,\n  // it's the window that opened us (i.e., window.opener)\n  GlobalVars.parentWindow =\n    GlobalVars.currentWindow.parent !== GlobalVars.currentWindow.self\n      ? GlobalVars.currentWindow.parent\n      : GlobalVars.currentWindow.opener;\n\n  if (!GlobalVars.parentWindow) {\n    GlobalVars.isFramelessWindow = true;\n    (window as ExtendedWindow).onNativeMessage = handleParentMessage;\n  } else {\n    // For iFrame scenario, add listener to listen 'message'\n    GlobalVars.currentWindow.addEventListener(\"message\", messageListener, false);\n  }\n\n  try {\n    // Send the initialized message to any origin, because at this point we most likely don't know the origin\n    // of the parent window, and this message contains no data that could pose a security risk.\n    GlobalVars.parentOrigin = \"*\";\n    const messageId = sendMessageRequest(GlobalVars.parentWindow, \"initialize\", [version]);\n    GlobalVars.callbacks[messageId] = (context: string, clientType: string) => {\n      GlobalVars.frameContext = context;\n      GlobalVars.hostClientType = clientType;\n    };\n  } finally {\n    GlobalVars.parentOrigin = null;\n  }\n\n  // Undocumented function used to clear state between unit tests\n  this._uninitialize = () => {\n    if (GlobalVars.frameContext) {\n      registerOnThemeChangeHandler(null);\n      registerFullScreenHandler(null);\n      registerBackButtonHandler(null);\n      registerBeforeUnloadHandler(null);\n    }\n\n    if (GlobalVars.frameContext === frameContexts.settings) {\n      settings.registerOnSaveHandler(null);\n    }\n\n    if (GlobalVars.frameContext === frameContexts.remove) {\n      settings.registerOnRemoveHandler(null);\n    }\n\n    if (!GlobalVars.isFramelessWindow) {\n      GlobalVars.currentWindow.removeEventListener(\"message\", messageListener, false);\n    }\n\n    GlobalVars.initializeCalled = false;\n    GlobalVars.parentWindow = null;\n    GlobalVars.parentOrigin = null;\n    GlobalVars.parentMessageQueue = [];\n    GlobalVars.childWindow = null;\n    GlobalVars.childOrigin = null;\n    GlobalVars.childMessageQueue = [];\n    GlobalVars.nextMessageId = 0;\n    GlobalVars.callbacks = {};\n    GlobalVars.frameContext = null;\n    GlobalVars.hostClientType = null;\n    GlobalVars.isFramelessWindow = false;\n  };\n}\n\n/**\n * Initializes the library. This must be called before any other SDK calls\n * but after the frame is loaded successfully.\n */\nexport function _uninitialize(): void { }\n\n/**\n * Enable print capability to support printing page using Ctrl+P and cmd+P\n */\nexport function enablePrintCapability(): void {\n  if (!GlobalVars.printCapabilityEnabled) {\n    GlobalVars.printCapabilityEnabled = true;\n    ensureInitialized();\n    // adding ctrl+P and cmd+P handler\n    document.addEventListener(\"keydown\", (event: KeyboardEvent) => {\n      if ((event.ctrlKey || event.metaKey) && event.keyCode === 80) {\n        print();\n        event.cancelBubble = true;\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      }\n    });\n  }\n}\n\n/**\n * default print handler\n */\nexport function print(): void {\n  window.print();\n}\n\n/**\n * Retrieves the current context the frame is running in.\n * @param callback The callback to invoke when the {@link Context} object is retrieved.\n */\nexport function getContext(callback: (context: Context) => void): void {\n  ensureInitialized();\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"getContext\");\n  GlobalVars.callbacks[messageId] = callback;\n}\n\n/**\n * Registers a handler for theme changes.\n * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n * @param handler The handler to invoke when the user changes their theme.\n */\nexport function registerOnThemeChangeHandler(\n  handler: (theme: string) => void\n): void {\n  ensureInitialized();\n  GlobalVars.themeChangeHandler = handler;\n  handler &&\n    sendMessageRequest(GlobalVars.parentWindow, \"registerHandler\", [\"themeChange\"]);\n}\n\n/**\n * Registers a handler for changes from or to full-screen view for a tab.\n * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n * @param handler The handler to invoke when the user toggles full-screen view for a tab.\n */\nexport function registerFullScreenHandler(\n  handler: (isFullScreen: boolean) => void\n): void {\n  ensureInitialized();\n\n  GlobalVars.fullScreenChangeHandler = handler;\n  handler &&\n    sendMessageRequest(GlobalVars.parentWindow, \"registerHandler\", [\"fullScreen\"]);\n}\n\n/**\n * Registers a handler for user presses of the Team client's back button. Experiences that maintain an internal\n * navigation stack should use this handler to navigate the user back within their frame. If an app finds\n * that after running its back button handler it cannot handle the event it should call the navigateBack\n * method to ask the Teams client to handle it instead.\n * @param handler The handler to invoke when the user presses their Team client's back button.\n */\nexport function registerBackButtonHandler(handler: () => boolean): void {\n  ensureInitialized();\n\n  GlobalVars.backButtonPressHandler = handler;\n  handler &&\n    sendMessageRequest(GlobalVars.parentWindow, \"registerHandler\", [\"backButton\"]);\n}\n\n/**\n * Navigates back in the Teams client. See registerBackButtonHandler for more information on when\n * it's appropriate to use this method.\n */\nexport function navigateBack(onComplete?: (status: boolean, reason?: string) => void): void {\n  ensureInitialized();\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"navigateBack\", []);\n  const errorMessage = \"Back navigation is not supported in the current client or context.\";\n  GlobalVars.callbacks[messageId] = onComplete ? onComplete : getGenericOnCompleteHandler(errorMessage);\n}\n\n/**\n * Registers a handler to be called before the page is unloaded.\n * @param handler The handler to invoke before the page is unloaded. If this handler returns true the page should\n * invoke the readyToUnload function provided to it once it's ready to be unloaded.\n */\nexport function registerBeforeUnloadHandler(\n  handler: (readyToUnload: () => void) => boolean\n): void {\n  ensureInitialized();\n\n  GlobalVars.beforeUnloadHandler = handler;\n  handler &&\n    sendMessageRequest(GlobalVars.parentWindow, \"registerHandler\", [\"beforeUnload\"]);\n}\n\n/**\n * Registers a handler for when the user reconfigurated tab\n * @param handler The handler to invoke when the user click on Settings.\n */\nexport function registerChangeSettingsHandler(\n  handler: () => void\n): void {\n  ensureInitialized(frameContexts.content);\n\n  GlobalVars.changeSettingsHandler = handler;\n  handler && sendMessageRequest(GlobalVars.parentWindow, \"registerHandler\", [\"changeSettings\"]);\n}\n\n/**\n * Navigates the frame to a new cross-domain URL. The domain of this URL must match at least one of the\n * valid domains specified in the validDomains block of the manifest; otherwise, an exception will be\n * thrown. This function needs to be used only when navigating the frame to a URL in a different domain\n * than the current one in a way that keeps the app informed of the change and allows the SDK to\n * continue working.\n * @param url The URL to navigate the frame to.\n */\nexport function navigateCrossDomain(url: string, onComplete?: (status: boolean, reason?: string) => void): void {\n  ensureInitialized(\n    frameContexts.content,\n    frameContexts.settings,\n    frameContexts.remove,\n    frameContexts.task\n  );\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"navigateCrossDomain\", [\n    url\n  ]);\n  const errorMessage = \"Cross-origin navigation is only supported for URLs matching the pattern registered in the manifest.\";\n  GlobalVars.callbacks[messageId] = onComplete ? onComplete : getGenericOnCompleteHandler(errorMessage);\n}\n\n/**\n * Allows an app to retrieve for this user tabs that are owned by this app.\n * If no TabInstanceParameters are passed, the app defaults to favorite teams and favorite channels.\n * @param callback The callback to invoke when the {@link TabInstanceParameters} object is retrieved.\n * @param tabInstanceParameters OPTIONAL Flags that specify whether to scope call to favorite teams or channels.\n */\nexport function getTabInstances(\n  callback: (tabInfo: TabInformation) => void,\n  tabInstanceParameters?: TabInstanceParameters\n): void {\n  ensureInitialized();\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"getTabInstances\", [\n    tabInstanceParameters\n  ]);\n  GlobalVars.callbacks[messageId] = callback;\n}\n\n/**\n * Allows an app to retrieve the most recently used tabs for this user.\n * @param callback The callback to invoke when the {@link TabInformation} object is retrieved.\n * @param tabInstanceParameters OPTIONAL Ignored, kept for future use\n */\nexport function getMruTabInstances(\n  callback: (tabInfo: TabInformation) => void,\n  tabInstanceParameters?: TabInstanceParameters\n): void {\n  ensureInitialized();\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"getMruTabInstances\", [\n    tabInstanceParameters\n  ]);\n  GlobalVars.callbacks[messageId] = callback;\n}\n\n/**\n * Shares a deep link that a user can use to navigate back to a specific state in this page.\n * @param deepLinkParameters ID and label for the link and fallback URL.\n */\nexport function shareDeepLink(deepLinkParameters: DeepLinkParameters): void {\n  ensureInitialized(frameContexts.content);\n\n  sendMessageRequest(GlobalVars.parentWindow, \"shareDeepLink\", [\n    deepLinkParameters.subEntityId,\n    deepLinkParameters.subEntityLabel,\n    deepLinkParameters.subEntityWebUrl\n  ]);\n}\n\n/**\n * Navigates the Microsoft Teams app to the specified tab instance.\n * @param tabInstance The tab instance to navigate to.\n */\nexport function navigateToTab(tabInstance: TabInstance, onComplete?: (status: boolean, reason?: string) => void): void {\n  ensureInitialized();\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"navigateToTab\", [\n    tabInstance\n  ]);\n\n  const errorMessage = \"Invalid internalTabInstanceId and/or channelId were/was provided\";\n  GlobalVars.callbacks[messageId] = onComplete ? onComplete : getGenericOnCompleteHandler(errorMessage);\n}\n","import { ensureInitialized, sendMessageRequest } from \"../internal/internalAPIs\";\nimport { GlobalVars } from \"../internal/globalVars\";\nimport { frameContexts } from \"../internal/constants\";\nimport { getGenericOnCompleteHandler } from \"../internal/utils\";\n\n/**\n * Namespace to interact with the settings-specific part of the SDK.\n * This object is usable only on the settings frame.\n */\nexport namespace settings {\n  let saveHandler: (evt: SaveEvent) => void;\n  let removeHandler: (evt: RemoveEvent) => void;\n  GlobalVars.handlers[\"settings.save\"] = handleSave;\n  GlobalVars.handlers[\"settings.remove\"] = handleRemove;\n\n  /**\n   * Sets the validity state for the settings.\n   * The initial value is false, so the user cannot save the settings until this is called with true.\n   * @param validityState Indicates whether the save or remove button is enabled for the user.\n   */\n  export function setValidityState(validityState: boolean): void {\n    ensureInitialized(frameContexts.settings, frameContexts.remove);\n    sendMessageRequest(GlobalVars.parentWindow, \"settings.setValidityState\", [\n      validityState\n    ]);\n  }\n\n  /**\n   * Gets the settings for the current instance.\n   * @param callback The callback to invoke when the {@link Settings} object is retrieved.\n   */\n  export function getSettings(callback: (instanceSettings: Settings) => void): void {\n    ensureInitialized(frameContexts.content, frameContexts.settings, frameContexts.remove);\n    const messageId = sendMessageRequest(GlobalVars.parentWindow, \"settings.getSettings\");\n    GlobalVars.callbacks[messageId] = callback;\n  }\n\n  /**\n   * Sets the settings for the current instance.\n   * This is an asynchronous operation; calls to getSettings are not guaranteed to reflect the changed state.\n   * @param settings The desired settings for this instance.\n   */\n  export function setSettings(instanceSettings: Settings, onComplete?: (status: boolean, reason?: string) => void): void {\n    ensureInitialized(frameContexts.content, frameContexts.settings);\n    const messageId = sendMessageRequest(GlobalVars.parentWindow, \"settings.setSettings\", [\n      instanceSettings\n    ]);\n    GlobalVars.callbacks[messageId] = onComplete ? onComplete : getGenericOnCompleteHandler();\n  }\n\n  /**\n   * Registers a handler for when the user attempts to save the settings. This handler should be used\n   * to create or update the underlying resource powering the content.\n   * The object passed to the handler must be used to notify whether to proceed with the save.\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   * @param handler The handler to invoke when the user selects the save button.\n   */\n  export function registerOnSaveHandler(handler: (evt: SaveEvent) => void): void {\n    ensureInitialized(frameContexts.settings);\n    saveHandler = handler;\n    handler && sendMessageRequest(GlobalVars.parentWindow, \"registerHandler\", [\"save\"]);\n  }\n\n  /**\n   * Registers a handler for user attempts to remove content. This handler should be used\n   * to remove the underlying resource powering the content.\n   * The object passed to the handler must be used to indicate whether to proceed with the removal.\n   * Only one handler may be registered at a time. Subsequent registrations will override the first.\n   * @param handler The handler to invoke when the user selects the remove button.\n   */\n  export function registerOnRemoveHandler(handler: (evt: RemoveEvent) => void): void {\n    ensureInitialized(frameContexts.remove);\n    removeHandler = handler;\n    handler && sendMessageRequest(GlobalVars.parentWindow, \"registerHandler\", [\"remove\"]);\n  }\n\n  function handleSave(result?: SaveParameters): void {\n    const saveEvent = new SaveEventImpl(result);\n    if (saveHandler) {\n      saveHandler(saveEvent);\n    }\n    else {\n      // If no handler is registered, we assume success.\n      saveEvent.notifySuccess();\n    }\n  }\n\n  export interface Settings {\n    /**\n     * A suggested display name for the new content.\n     * In the settings for an existing instance being updated, this call has no effect.\n     */\n    suggestedDisplayName?: string;\n    /**\n     * Sets the URL to use for the content of this instance.\n     */\n    contentUrl: string;\n    /**\n     * Sets the URL for the removal configuration experience.\n     */\n    removeUrl?: string;\n    /**\n     * Sets the URL to use for the external link to view the underlying resource in a browser.\n     */\n    websiteUrl?: string;\n    /**\n     * The developer-defined unique ID for the entity to which this content points.\n     */\n    entityId: string;\n  }\n\n  export interface SaveEvent {\n    /**\n     * Object containing properties passed as arguments to the settings.save event.\n     */\n    result: SaveParameters;\n    /**\n     * Indicates that the underlying resource has been created and the settings can be saved.\n     */\n    notifySuccess(): void;\n    /**\n     * Indicates that creation of the underlying resource failed and that the settings cannot be saved.\n     * @param reason Specifies a reason for the failure. If provided, this string is displayed to the user; otherwise a generic error is displayed.\n     */\n    notifyFailure(reason?: string): void;\n  }\n\n  export interface RemoveEvent {\n    /**\n     * Indicates that the underlying resource has been removed and the content can be removed.\n     */\n    notifySuccess(): void;\n    /**\n     * Indicates that removal of the underlying resource failed and that the content cannot be removed.\n     * @param reason Specifies a reason for the failure. If provided, this string is displayed to the user; otherwise a generic error is displayed.\n     */\n    notifyFailure(reason?: string): void;\n  }\n\n  export interface SaveParameters {\n    /**\n     * Connector's webhook Url returned as arguments to settings.save event as part of user clicking on Save\n     */\n    webhookUrl?: string;\n  }\n\n  /**\n   * @private\n   * Hide from docs, since this class is not directly used.\n   */\n  class SaveEventImpl implements SaveEvent {\n    public notified: boolean = false;\n    public result: SaveParameters;\n    constructor(result?: SaveParameters) {\n      this.result = result ? result : {};\n    }\n    public notifySuccess(): void {\n      this.ensureNotNotified();\n      sendMessageRequest(GlobalVars.parentWindow, \"settings.save.success\");\n      this.notified = true;\n    }\n    public notifyFailure(reason?: string): void {\n      this.ensureNotNotified();\n      sendMessageRequest(GlobalVars.parentWindow, \"settings.save.failure\", [reason]);\n      this.notified = true;\n    }\n    private ensureNotNotified(): void {\n      if (this.notified) {\n        throw new Error(\"The SaveEvent may only notify success or failure once.\");\n      }\n    }\n  }\n\n  function handleRemove(): void {\n    const removeEvent = new RemoveEventImpl();\n    if (removeHandler) {\n      removeHandler(removeEvent);\n    }\n    else {\n      // If no handler is registered, we assume success.\n      removeEvent.notifySuccess();\n    }\n  }\n\n  /**\n   * @private\n   * Hide from docs, since this class is not directly used.\n   */\n  class RemoveEventImpl implements RemoveEvent {\n    public notified: boolean = false;\n\n    public notifySuccess(): void {\n      this.ensureNotNotified();\n      sendMessageRequest(GlobalVars.parentWindow, \"settings.remove.success\");\n      this.notified = true;\n    }\n\n    public notifyFailure(reason?: string): void {\n      this.ensureNotNotified();\n      sendMessageRequest(GlobalVars.parentWindow, \"settings.remove.failure\", [reason]);\n      this.notified = true;\n    }\n\n    private ensureNotNotified(): void {\n      if (this.notified) {\n        throw new Error(\"The removeEvent may only notify success or failure once.\");\n      }\n    }\n  }\n}","import { ensureInitialized, sendMessageRequest } from \"../internal/internalAPIs\";\nimport { GlobalVars } from \"../internal/globalVars\";\nimport { frameContexts } from \"../internal/constants\";\nimport { getGenericOnCompleteHandler } from \"../internal/utils\";\n\nexport interface IAppWindow {\n  postMessage(message): void;\n  addEventListener(type: string, listener: Function): void;\n}\n\nexport class ChildAppWindow implements IAppWindow {\n  public postMessage(\n    message: any,\n    onComplete?: (status: boolean, reason?: string) => void\n  ): void {\n    ensureInitialized();\n    const messageId = sendMessageRequest(GlobalVars.parentWindow, \"messageForChild\", [\n      message\n    ]);\n    GlobalVars.callbacks[messageId] = onComplete ? onComplete : getGenericOnCompleteHandler();\n  }\n\n  public addEventListener(type: string, listener: (message: any) => void): void {\n    if (type === \"message\") {\n      GlobalVars.handlers[\"messageForParent\"] = listener;\n    }\n  }\n}\n\nexport class ParentAppWindow implements IAppWindow {\n  private static _instance: ParentAppWindow;\n  public static get Instance(): IAppWindow {\n    // Do you need arguments? Make it a regular method instead.\n    return this._instance || (this._instance = new this());\n  }\n\n  public postMessage(\n    message: any,\n    onComplete?: (status: boolean, reason?: string) => void\n  ): void {\n    ensureInitialized(frameContexts.task);\n    const messageId = sendMessageRequest(GlobalVars.parentWindow, \"messageForParent\", [\n      message\n    ]);\n\n    GlobalVars.callbacks[messageId] = onComplete ? onComplete : getGenericOnCompleteHandler();\n  }\n\n  public addEventListener(type: string, listener: (message: any) => void): void {\n    if (type === \"message\") {\n      GlobalVars.handlers[\"messageForChild\"] = listener;\n    }\n  }\n}","export * from \"./private/index\";\nexport * from \"./public/index\";","export { menus } from \"./menus\";\nexport {\n  ChatMembersInformation,\n  FilePreviewParameters,\n  NotificationTypes,\n  ShowNotificationParameters,\n  TeamInstanceParameters,\n  ThreadMember,\n  UserJoinedTeamsInformation,\n} from \"./interfaces\";\nexport {\n  enterFullscreen,\n  executeDeepLink,\n  exitFullscreen,\n  getChatMembers,\n  getConfigSetting,\n  getUserJoinedTeams,\n  openFilePreview,\n  sendCustomMessage,\n  showNotification,\n  uploadCustomApp\n} from \"./privateAPIs\";\nexport {\n  conversations\n} from \"./conversations\";\n","import { ensureInitialized, sendMessageRequest } from \"../internal/internalAPIs\";\nimport { GlobalVars } from \"../internal/globalVars\";\n/**\n * Namespace to interact with the menu-specific part of the SDK.\n * This object is used to show View Configuration, Action Menu and Navigation Bar Menu.\n *\n * @private\n * Hide from docs until feature is complete\n */\nexport namespace menus {\n  /**\n   * Represents information about item in View Configuration.\n   */\n  export interface ViewConfiguration {\n    /**\n     * Unique identifier of view.\n     */\n    id: string;\n    /**\n     * Display title of the view.\n     */\n    title: string;\n    /**\n     * Additional information for accessibility.\n     */\n    contentDescription?: string;\n  }\n  /**\n   * Represents information about menu item for Action Menu and Navigation Bar Menu.\n   */\n  export class MenuItem {\n    /**\n     * Unique identifier for the menu item.\n     */\n    public id: string;\n    /**\n     * Display title of the menu item.\n     */\n    public title: string;\n    /**\n     * Display icon of the menu item. The icon value must be a string having SVG icon content.\n     */\n    public icon?: string;\n    /**\n     * Selected state display icon of the menu item. The icon value must be a string having SVG icon content.\n     */\n    public iconSelected?: string;\n    /**\n     * Additional information for accessibility.\n     */\n    public contentDescription?: string;\n    /**\n     * State of the menu item\n     */\n    public enabled: boolean = true;\n    /**\n     * Interface to show list of items on selection of menu item.\n     */\n    public viewData: ViewData;\n  }\n  /**\n   * Represents information about view to show on Navigation Bar Menu item selection\n   */\n  export interface ViewData {\n    /**\n     * Display header title of the item list.\n     */\n    listTitle?: string;\n    /**\n     * Type of the menu item.\n     */\n    listType: MenuListType;\n    /**\n     * Array of MenuItem. Icon value will be required for all items in the list.\n     */\n    listItems: MenuItem[];\n  }\n  /**\n   * Represents information about type of list to display in Navigation Bar Menu.\n   */\n  export enum MenuListType {\n    dropDown = \"dropDown\",\n    popOver = \"popOver\"\n  }\n  let navBarMenuItemPressHandler: (id: string) => boolean;\n  GlobalVars.handlers[\"navBarMenuItemPress\"] = handleNavBarMenuItemPress;\n  let actionMenuItemPressHandler: (id: string) => boolean;\n  GlobalVars.handlers[\"actionMenuItemPress\"] = handleActionMenuItemPress;\n  let viewConfigItemPressHandler: (id: string) => boolean;\n  GlobalVars.handlers[\"setModuleView\"] = handleViewConfigItemPress;\n  /**\n   * Registers list of view configurations and it's handler.\n   * Handler is responsible for listening selection of View Configuration.\n   * @param viewConfig List of view configurations. Minimum 1 value is required.\n   * @param handler The handler to invoke when the user selects view configuration.\n   */\n  export function setUpViews(viewConfig: ViewConfiguration[], handler: (id: string) => boolean): void {\n    ensureInitialized();\n    viewConfigItemPressHandler = handler;\n    sendMessageRequest(GlobalVars.parentWindow, \"setUpViews\", [viewConfig]);\n  }\n  function handleViewConfigItemPress(id: string): void {\n    if (!viewConfigItemPressHandler || !viewConfigItemPressHandler(id)) {\n      ensureInitialized();\n      sendMessageRequest(GlobalVars.parentWindow, \"viewConfigItemPress\", [id]);\n    }\n  }\n  /**\n   * Used to set menu items on the Navigation Bar. If icon is available, icon will be shown, otherwise title will be shown.\n   * @param items List of MenuItems for Navigation Bar Menu.\n   * @param handler The handler to invoke when the user selects menu item.\n   */\n  export function setNavBarMenu(items: MenuItem[], handler: (id: string) => boolean): void {\n    ensureInitialized();\n    navBarMenuItemPressHandler = handler;\n    sendMessageRequest(GlobalVars.parentWindow, \"setNavBarMenu\", [items]);\n  }\n  function handleNavBarMenuItemPress(id: string): void {\n    if (!navBarMenuItemPressHandler || !navBarMenuItemPressHandler(id)) {\n      ensureInitialized();\n      sendMessageRequest(GlobalVars.parentWindow, \"handleNavBarMenuItemPress\", [id]);\n    }\n  }\n  export interface ActionMenuParameters {\n    /**\n     * Display title for Action Menu\n     */\n    title: string;\n    /**\n     * List of MenuItems for Action Menu\n     */\n    items: MenuItem[];\n  }\n  /**\n   * Used to show Action Menu.\n   * @param params Parameters for Menu Parameters\n   * @param handler The handler to invoke when the user selects menu item.\n   */\n  export function showActionMenu(params: ActionMenuParameters, handler: (id: string) => boolean): void {\n    ensureInitialized();\n    actionMenuItemPressHandler = handler;\n    sendMessageRequest(GlobalVars.parentWindow, \"showActionMenu\", [params]);\n  }\n  function handleActionMenuItemPress(id: string): void {\n    if (!actionMenuItemPressHandler || !actionMenuItemPressHandler(id)) {\n      ensureInitialized();\n      sendMessageRequest(GlobalVars.parentWindow, \"handleActionMenuItemPress\", [id]);\n    }\n  }\n}","import { ensureInitialized, sendMessageRequest } from \"../internal/internalAPIs\";\nimport { GlobalVars } from \"../internal/globalVars\";\nimport { frameContexts } from \"../internal/constants\";\nimport { ChatMembersInformation, ShowNotificationParameters, FilePreviewParameters, TeamInstanceParameters, UserJoinedTeamsInformation } from \"./interfaces\";\nimport { getGenericOnCompleteHandler } from \"../internal/utils\";\n\n/**\n * @private\n * Hide from docs\n * ------\n * Allows an app to retrieve information of all user joined teams\n * @param callback The callback to invoke when the {@link TeamInstanceParameters} object is retrieved.\n * @param teamInstanceParameters OPTIONAL Flags that specify whether to scope call to favorite teams\n */\nexport function getUserJoinedTeams(\n  callback: (userJoinedTeamsInformation: UserJoinedTeamsInformation) => void,\n  teamInstanceParameters?: TeamInstanceParameters\n): void {\n  ensureInitialized();\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"getUserJoinedTeams\", [\n    teamInstanceParameters\n  ]);\n  GlobalVars.callbacks[messageId] = callback;\n}\n\n/**\n * @private\n * Hide from docs\n * ------\n * Place the tab into full-screen mode.\n */\nexport function enterFullscreen() {\n  ensureInitialized(frameContexts.content);\n  sendMessageRequest(GlobalVars.parentWindow, \"enterFullscreen\", []);\n}\n\n/**\n * @private\n * Hide from docs\n * ------\n * Reverts the tab into normal-screen mode. \n */\nexport function exitFullscreen() {\n  ensureInitialized(frameContexts.content);\n  sendMessageRequest(GlobalVars.parentWindow, \"exitFullscreen\", []);\n}\n\n/**\n * @private\n * Hide from docs.\n * ------\n * Opens a client-friendly preview of the specified file.\n * @param file The file to preview.\n */\nexport function openFilePreview(\n  filePreviewParameters: FilePreviewParameters\n): void {\n  ensureInitialized(frameContexts.content);\n\n  const params = [\n    filePreviewParameters.entityId,\n    filePreviewParameters.title,\n    filePreviewParameters.description,\n    filePreviewParameters.type,\n    filePreviewParameters.objectUrl,\n    filePreviewParameters.downloadUrl,\n    filePreviewParameters.webPreviewUrl,\n    filePreviewParameters.webEditUrl,\n    filePreviewParameters.baseUrl,\n    filePreviewParameters.editFile,\n    filePreviewParameters.subEntityId\n  ];\n\n  sendMessageRequest(GlobalVars.parentWindow, \"openFilePreview\", params);\n}\n\n/**\n * @private\n * Hide from docs.\n * ------\n * display notification API.\n * @param message Notification message.\n * @param notificationType Notification type\n */\nexport function showNotification(\n  showNotificationParameters: ShowNotificationParameters\n): void {\n  ensureInitialized(frameContexts.content);\n  const params = [\n    showNotificationParameters.message,\n    showNotificationParameters.notificationType\n  ];\n  sendMessageRequest(GlobalVars.parentWindow, \"showNotification\", params);\n}\n\n/**\n * @private\n * Hide from docs.\n * ------\n * execute deep link API.\n * @param deepLink deep link.\n */\nexport function executeDeepLink(deepLink: string, onComplete?: (status: boolean, reason?: string) => void): void {\n  ensureInitialized(frameContexts.content);\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"executeDeepLink\", [\n    deepLink\n  ]);\n  GlobalVars.callbacks[messageId] = onComplete ? onComplete : getGenericOnCompleteHandler();\n}\n\n/**\n * @private\n * Hide from docs.\n * ------\n * Upload a custom App manifest directly to both team and personal scopes.\n * This method works just for the first party Apps.\n */\nexport function uploadCustomApp(manifestBlob: Blob, onComplete?: (status: boolean, reason?: string) => void): void {\n  ensureInitialized();\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"uploadCustomApp\", [\n    manifestBlob\n  ]);\n  GlobalVars.callbacks[messageId] = onComplete ? onComplete : getGenericOnCompleteHandler();\n}\n\n/**\n * @private\n * Internal use only\n * Sends a custom action message to Teams.\n * @param actionName Specifies name of the custom action to be sent\n * @param args Specifies additional arguments passed to the action\n * @returns id of sent message\n */\nexport function sendCustomMessage(\n  actionName: string,\n  // tslint:disable-next-line:no-any\n  args?: any[]\n): number {\n  ensureInitialized();\n  return sendMessageRequest(GlobalVars.parentWindow, actionName, args);\n}\n\n/**\n * @private\n * Hide from docs\n * ------\n * Allows an app to retrieve information of all chat members\n * Because a malicious party run your content in a browser, this value should\n * be used only as a hint as to who the members are and never as proof of membership.\n * @param callback The callback to invoke when the {@link ChatMembersInformation} object is retrieved.\n */\nexport function getChatMembers(\n  callback: (chatMembersInformation: ChatMembersInformation) => void\n): void {\n  ensureInitialized();\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"getChatMembers\");\n  GlobalVars.callbacks[messageId] = callback;\n}\n\n/**\n * @private\n * Hide from docs\n * ------\n * Allows an app to get the configuration setting value\n * @param callback The callback to invoke when the value is retrieved.\n * @param key The key for the config setting\n */\nexport function getConfigSetting(\n  callback: (value: string) => void,\n  key: string\n): void {\n  ensureInitialized();\n\n  const messageId = sendMessageRequest(GlobalVars.parentWindow, \"getConfigSetting\", [\n    key\n  ]);\n  GlobalVars.callbacks[messageId] = callback;\n}\n","import { ensureInitialized, sendMessageRequest } from \"../internal/internalAPIs\";\nimport { GlobalVars } from \"../internal/globalVars\";\nimport { frameContexts } from \"../internal/constants\";\nimport { OpenConversationRequest } from \"../public/interfaces\";\n\n/**\n * Namespace to interact with the conversational subEntities inside the tab\n */\nexport namespace conversations {\n\n  /**\n  * @private\n  * Hide from docs\n  * --------------\n  * Allows the user to start or continue a conversation with each subentity inside the tab\n  */\n  export function openConversation(\n    openConversationRequest: OpenConversationRequest\n  ): void {\n    ensureInitialized(frameContexts.content);\n    const messageId = sendMessageRequest(GlobalVars.parentWindow, \"conversations.openConversation\", [{\n      title: openConversationRequest.title,\n      subEntityId: openConversationRequest.subEntityId,\n      conversationId: openConversationRequest.conversationId\n    }]);\n    GlobalVars.onCloseConversationHandler = openConversationRequest.onCloseConversation;\n    GlobalVars.onStartConversationHandler = openConversationRequest.onStartConversation;\n    GlobalVars.callbacks[messageId] = (status: boolean, reason: string) => {\n      if (!status) {\n        throw new Error(reason);\n      }\n    };\n  }\n\n  /**\n  * @private\n  * Hide from docs\n  * --------------\n  * Allows the user to close the conversation in the right pane\n  */\n  export function closeConversation(): void {\n    ensureInitialized(frameContexts.content);\n    sendMessageRequest(GlobalVars.parentWindow, \"conversations.closeConversation\");\n    GlobalVars.onCloseConversationHandler = null;\n    GlobalVars.onStartConversationHandler = null;\n  }\n}\n","export { authentication } from \"./authentication\";\nexport {\n  HostClientType,\n  TaskModuleDimension,\n  TeamType,\n  UserTeamRole\n} from \"./constants\";\nexport {\n  Context,\n  DeepLinkParameters,\n  TabInformation,\n  TabInstance,\n  TabInstanceParameters,\n  TaskInfo,\n  TeamInformation\n} from \"./interfaces\";\nexport {\n  enablePrintCapability,\n  getContext,\n  getMruTabInstances,\n  getTabInstances,\n  initialize,\n  navigateBack,\n  navigateCrossDomain,\n  navigateToTab,\n  print,\n  registerBackButtonHandler,\n  registerBeforeUnloadHandler,\n  registerChangeSettingsHandler,\n  registerFullScreenHandler,\n  registerOnThemeChangeHandler,\n  shareDeepLink\n} from \"./publicAPIs\";\nexport { settings } from \"./settings\";\nexport { tasks } from \"./tasks\";\nexport {\n  ChildAppWindow,\n  IAppWindow,\n  ParentAppWindow\n} from \"./appWindow\";","import { ensureInitialized, sendMessageRequest, waitForMessageQueue } from \"../internal/internalAPIs\";\nimport { GlobalVars } from \"../internal/globalVars\";\nimport { frameContexts } from \"../internal/constants\";\nimport { HostClientType } from \"./constants\";\n\n/**\n * Namespace to interact with the authentication-specific part of the SDK.\n * This object is used for starting or completing authentication flows.\n */\nexport namespace authentication {\n  let authParams: AuthenticateParameters;\n  let authWindowMonitor: number;\n  GlobalVars.handlers[\"authentication.authenticate.success\"] = handleSuccess;\n  GlobalVars.handlers[\"authentication.authenticate.failure\"] = handleFailure;\n\n  /**\n   * Registers the authentication GlobalVars.handlers\n   * @param authenticateParameters A set of values that configure the authentication pop-up.\n   */\n  export function registerAuthenticationHandlers(authenticateParameters: AuthenticateParameters): void {\n    authParams = authenticateParameters;\n  }\n\n  /**\n   * Initiates an authentication request, which opens a new window with the specified settings.\n   */\n  export function authenticate(authenticateParameters?: AuthenticateParameters): void {\n    const authenticateParams = authenticateParameters !== undefined\n      ? authenticateParameters\n      : authParams;\n    ensureInitialized(frameContexts.content, frameContexts.settings, frameContexts.remove, frameContexts.task);\n    if (GlobalVars.hostClientType === HostClientType.desktop ||\n      GlobalVars.hostClientType === HostClientType.android ||\n      GlobalVars.hostClientType === HostClientType.ios ||\n      GlobalVars.hostClientType === HostClientType.rigel) {\n      // Convert any relative URLs into absolute URLs before sending them over to the parent window.\n      const link = document.createElement(\"a\");\n      link.href = authenticateParams.url;\n      // Ask the parent window to open an authentication window with the parameters provided by the caller.\n      const messageId = sendMessageRequest(GlobalVars.parentWindow, \"authentication.authenticate\", [link.href, authenticateParams.width, authenticateParams.height]);\n      GlobalVars.callbacks[messageId] = (success: boolean, response: string) => {\n        if (success) {\n          authenticateParams.successCallback(response);\n        }\n        else {\n          authenticateParams.failureCallback(response);\n        }\n      };\n    }\n    else {\n      // Open an authentication window with the parameters provided by the caller.\n      openAuthenticationWindow(authenticateParams);\n    }\n  }\n\n  /**\n   * @private\n   * Hide from docs.\n   * ------\n   * Requests an Azure AD token to be issued on behalf of the app. The token is acquired from the cache\n   * if it is not expired. Otherwise a request is sent to Azure AD to obtain a new token.\n   * @param authTokenRequest A set of values that configure the token request.\n   */\n  export function getAuthToken(authTokenRequest: AuthTokenRequest): void {\n    ensureInitialized();\n    const messageId = sendMessageRequest(GlobalVars.parentWindow, \"authentication.getAuthToken\", [authTokenRequest.resources]);\n    GlobalVars.callbacks[messageId] = (success: boolean, result: string) => {\n      if (success) {\n        authTokenRequest.successCallback(result);\n      }\n      else {\n        authTokenRequest.failureCallback(result);\n      }\n    };\n  }\n\n  /**\n   * @private\n   * Hide from docs.\n   * ------\n   * Requests the decoded Azure AD user identity on behalf of the app.\n   */\n  export function getUser(userRequest: UserRequest): void {\n    ensureInitialized();\n    const messageId = sendMessageRequest(GlobalVars.parentWindow, \"authentication.getUser\");\n    GlobalVars.callbacks[messageId] = (success: boolean, result: UserProfile | string) => {\n      if (success) {\n        userRequest.successCallback(result as UserProfile);\n      }\n      else {\n        userRequest.failureCallback(result as string);\n      }\n    };\n  }\n\n  function closeAuthenticationWindow(): void {\n    // Stop monitoring the authentication window\n    stopAuthenticationWindowMonitor();\n    // Try to close the authentication window and clear all properties associated with it\n    try {\n      if (GlobalVars.childWindow) {\n        GlobalVars.childWindow.close();\n      }\n    }\n    finally {\n      GlobalVars.childWindow = null;\n      GlobalVars.childOrigin = null;\n    }\n  }\n\n  function openAuthenticationWindow(authenticateParameters: AuthenticateParameters): void {\n    authParams = authenticateParameters;\n    // Close the previously opened window if we have one\n    closeAuthenticationWindow();\n    // Start with a sensible default size\n    let width = authParams.width || 600;\n    let height = authParams.height || 400;\n    // Ensure that the new window is always smaller than our app's window so that it never fully covers up our app\n    width = Math.min(width, GlobalVars.currentWindow.outerWidth - 400);\n    height = Math.min(height, GlobalVars.currentWindow.outerHeight - 200);\n    // Convert any relative URLs into absolute URLs before sending them over to the parent window\n    const link = document.createElement(\"a\");\n    link.href = authParams.url;\n    // We are running in the browser, so we need to center the new window ourselves\n    let left: number = typeof GlobalVars.currentWindow.screenLeft !== \"undefined\"\n      ? GlobalVars.currentWindow.screenLeft\n      : GlobalVars.currentWindow.screenX;\n    let top: number = typeof GlobalVars.currentWindow.screenTop !== \"undefined\"\n      ? GlobalVars.currentWindow.screenTop\n      : GlobalVars.currentWindow.screenY;\n    left += GlobalVars.currentWindow.outerWidth / 2 - width / 2;\n    top += GlobalVars.currentWindow.outerHeight / 2 - height / 2;\n    // Open a child window with a desired set of standard browser features\n    GlobalVars.childWindow = GlobalVars.currentWindow.open(link.href, \"_blank\", \"toolbar=no, location=yes, status=no, menubar=no, scrollbars=yes, top=\" +\n      top +\n      \", left=\" +\n      left +\n      \", width=\" +\n      width +\n      \", height=\" +\n      height);\n    if (GlobalVars.childWindow) {\n      // Start monitoring the authentication window so that we can detect if it gets closed before the flow completes\n      startAuthenticationWindowMonitor();\n    }\n    else {\n      // If we failed to open the window, fail the authentication flow\n      handleFailure(\"FailedToOpenWindow\");\n    }\n  }\n\n  function stopAuthenticationWindowMonitor(): void {\n    if (authWindowMonitor) {\n      clearInterval(authWindowMonitor);\n      authWindowMonitor = 0;\n    }\n    delete GlobalVars.handlers[\"initialize\"];\n    delete GlobalVars.handlers[\"navigateCrossDomain\"];\n  }\n\n  function startAuthenticationWindowMonitor(): void {\n    // Stop the previous window monitor if one is running\n    stopAuthenticationWindowMonitor();\n    // Create an interval loop that\n    // - Notifies the caller of failure if it detects that the authentication window is closed\n    // - Keeps pinging the authentication window while it is open to re-establish\n    //   contact with any pages along the authentication flow that need to communicate\n    //   with us\n    authWindowMonitor = GlobalVars.currentWindow.setInterval(() => {\n      if (!GlobalVars.childWindow || GlobalVars.childWindow.closed) {\n        handleFailure(\"CancelledByUser\");\n      }\n      else {\n        const savedChildOrigin = GlobalVars.childOrigin;\n        try {\n          GlobalVars.childOrigin = \"*\";\n          sendMessageRequest(GlobalVars.childWindow, \"ping\");\n        }\n        finally {\n          GlobalVars.childOrigin = savedChildOrigin;\n        }\n      }\n    }, 100);\n    // Set up an initialize-message handler that gives the authentication window its frame context\n    GlobalVars.handlers[\"initialize\"] = () => {\n      return [frameContexts.authentication, GlobalVars.hostClientType];\n    };\n    // Set up a navigateCrossDomain message handler that blocks cross-domain re-navigation attempts\n    // in the authentication window. We could at some point choose to implement this method via a call to\n    // authenticationWindow.location.href = url; however, we would first need to figure out how to\n    // validate the URL against the tab's list of valid domains.\n    GlobalVars.handlers[\"navigateCrossDomain\"] = (url: string) => {\n      return false;\n    };\n  }\n\n  /**\n   * Notifies the frame that initiated this authentication request that the request was successful.\n   * This function is usable only on the authentication window.\n   * This call causes the authentication window to be closed.\n   * @param result Specifies a result for the authentication. If specified, the frame that initiated the authentication pop-up receives this value in its callback.\n   * @param callbackUrl Specifies the url to redirect back to if the client is Win32 Outlook.\n   */\n  export function notifySuccess(result?: string, callbackUrl?: string): void {\n    redirectIfWin32Outlook(callbackUrl, \"result\", result);\n    ensureInitialized(frameContexts.authentication);\n    sendMessageRequest(GlobalVars.parentWindow, \"authentication.authenticate.success\", [\n      result\n    ]);\n    // Wait for the message to be sent before closing the window\n    waitForMessageQueue(GlobalVars.parentWindow, () => setTimeout(() => GlobalVars.currentWindow.close(), 200));\n  }\n\n  /**\n   * Notifies the frame that initiated this authentication request that the request failed.\n   * This function is usable only on the authentication window.\n   * This call causes the authentication window to be closed.\n   * @param result Specifies a result for the authentication. If specified, the frame that initiated the authentication pop-up receives this value in its callback.\n   * @param callbackUrl Specifies the url to redirect back to if the client is Win32 Outlook.\n   */\n  export function notifyFailure(reason?: string, callbackUrl?: string): void {\n    redirectIfWin32Outlook(callbackUrl, \"reason\", reason);\n    ensureInitialized(frameContexts.authentication);\n    sendMessageRequest(GlobalVars.parentWindow, \"authentication.authenticate.failure\", [\n      reason\n    ]);\n    // Wait for the message to be sent before closing the window\n    waitForMessageQueue(GlobalVars.parentWindow, () => setTimeout(() => GlobalVars.currentWindow.close(), 200));\n  }\n\n  function handleSuccess(result?: string): void {\n    try {\n      if (authParams && authParams.successCallback) {\n        authParams.successCallback(result);\n      }\n    }\n    finally {\n      authParams = null;\n      closeAuthenticationWindow();\n    }\n  }\n\n  function handleFailure(reason?: string): void {\n    try {\n      if (authParams && authParams.failureCallback) {\n        authParams.failureCallback(reason);\n      }\n    }\n    finally {\n      authParams = null;\n      closeAuthenticationWindow();\n    }\n  }\n\n  /**\n   * Validates that the callbackUrl param is a valid connector url, appends the result/reason and authSuccess/authFailure as URL fragments and redirects the window\n   * @param callbackUrl - the connectors url to redirect to\n   * @param key - \"result\" in case of success and \"reason\" in case of failure\n   * @param value - the value of the passed result/reason parameter\n   */\n  function redirectIfWin32Outlook(callbackUrl?: string, key?: string, value?: string): void {\n    if (callbackUrl) {\n      const link = document.createElement(\"a\");\n      link.href = decodeURIComponent(callbackUrl);\n      if (link.host &&\n        link.host !== window.location.host &&\n        link.host === \"outlook.office.com\" &&\n        link.search.indexOf(\"client_type=Win32_Outlook\") > -1) {\n        if (key && key === \"result\") {\n          if (value) {\n            link.href = updateUrlParameter(link.href, \"result\", value);\n          }\n          GlobalVars.currentWindow.location.assign(updateUrlParameter(link.href, \"authSuccess\", \"\"));\n        }\n        if (key && key === \"reason\") {\n          if (value) {\n            link.href = updateUrlParameter(link.href, \"reason\", value);\n          }\n          GlobalVars.currentWindow.location.assign(updateUrlParameter(link.href, \"authFailure\", \"\"));\n        }\n      }\n    }\n  }\n\n  /**\n   * Appends either result or reason as a fragment to the 'callbackUrl'\n   * @param uri - the url to modify\n   * @param key - the fragment key\n   * @param value - the fragment value\n   */\n  function updateUrlParameter(uri: string, key: string, value: string): string {\n    const i = uri.indexOf(\"#\");\n    let hash = i === -1 ? \"#\" : uri.substr(i);\n    hash = hash + \"&\" + key + (value !== \"\" ? \"=\" + value : \"\");\n    uri = i === -1 ? uri : uri.substr(0, i);\n    return uri + hash;\n  }\n\n  export interface AuthenticateParameters {\n    /**\n     * The URL for the authentication pop-up.\n     */\n    url: string;\n    /**\n     * The preferred width for the pop-up. This value can be ignored if outside the acceptable bounds.\n     */\n    width?: number;\n    /**\n     * The preferred height for the pop-up. This value can be ignored if outside the acceptable bounds.\n     */\n    height?: number;\n    /**\n     * A function that is called if the authentication succeeds, with the result returned from the authentication pop-up.\n     */\n    successCallback?: (result?: string) => void;\n    /**\n     * A function that is called if the authentication fails, with the reason for the failure returned from the authentication pop-up.\n     */\n    failureCallback?: (reason?: string) => void;\n  }\n  /**\n   * @private\n   * Hide from docs.\n   * ------\n   */\n  export interface AuthTokenRequest {\n    /**\n     * An array of resource URIs identifying the target resources for which the token should be requested.\n     */\n    resources: string[];\n    /**\n     * A function that is called if the token request succeeds, with the resulting token.\n     */\n    successCallback?: (token: string) => void;\n    /**\n     * A function that is called if the token request fails, with the reason for the failure.\n     */\n    failureCallback?: (reason: string) => void;\n  }\n  /**\n   * @private\n   * Hide from docs.\n   * ------\n   */\n  export interface UserRequest {\n    /**\n     * A function that is called if the token request succeeds, with the resulting token.\n     */\n    successCallback?: (user: UserProfile) => void;\n    /**\n     * A function that is called if the token request fails, with the reason for the failure.\n     */\n    failureCallback?: (reason: string) => void;\n  }\n  /**\n   * @private\n   * Hide from docs.\n   * ------\n   */\n  export interface UserProfile {\n    /**\n     * The intended recipient of the token. The application that receives the token must verify that the audience\n     * value is correct and reject any tokens intended for a different audience.\n     */\n    aud: string;\n    /**\n     * Identifies how the subject of the token was authenticated.\n     */\n    amr: string[];\n    /**\n     * Stores the time at which the token was issued. It is often used to measure token freshness.\n     */\n    iat: number;\n    /**\n     * Identifies the security token service (STS) that constructs and returns the token. In the tokens that Azure AD\n     * returns, the issuer is sts.windows.net. The GUID in the issuer claim value is the tenant ID of the Azure AD\n     * directory. The tenant ID is an immutable and reliable identifier of the directory.\n     */\n    iss: string;\n    /**\n     * Provides the last name, surname, or family name of the user as defined in the Azure AD user object.\n     */\n    family_name: string;\n    /**\n     * Provides the first or \"given\" name of the user, as set on the Azure AD user object.\n     */\n    given_name: string;\n    /**\n     * Provides a human-readable value that identifies the subject of the token. This value is not guaranteed to\n     * be unique within a tenant and is designed to be used only for display purposes.\n     */\n    unique_name: string;\n    /**\n     * Contains a unique identifier of an object in Azure AD. This value is immutable and cannot be reassigned or\n     * reused. Use the object ID to identify an object in queries to Azure AD.\n     */\n    oid: string;\n    /**\n     * Identifies the principal about which the token asserts information, such as the user of an application.\n     * This value is immutable and cannot be reassigned or reused, so it can be used to perform authorization\n     * checks safely. Because the subject is always present in the tokens the Azure AD issues, we recommended\n     * using this value in a general-purpose authorization system.\n     */\n    sub: string;\n    /**\n     * An immutable, non-reusable identifier that identifies the directory tenant that issued the token. You can\n     * use this value to access tenant-specific directory resources in a multitenant application. For example,\n     * you can use this value to identify the tenant in a call to the Graph API.\n     */\n    tid: string;\n    /**\n     * Defines the time interval within which a token is valid. The service that validates the token should verify\n     * that the current date is within the token lifetime; otherwise it should reject the token. The service might\n     * allow for up to five minutes beyond the token lifetime to account for any differences in clock time (\"time\n     * skew\") between Azure AD and the service.\n     */\n    exp: number;\n    nbf: number;\n    /**\n     * Stores the user name of the user principal.\n     */\n    upn: string;\n    /**\n     * Stores the version number of the token.\n     */\n    ver: string;\n  }\n}","import { TaskInfo } from \"./interfaces\";\nimport { ensureInitialized, sendMessageRequest } from \"../internal/internalAPIs\";\nimport { GlobalVars } from \"../internal/globalVars\";\nimport { frameContexts } from \"../internal/constants\";\nimport { IAppWindow, ChildAppWindow } from \"./appWindow\";\n\n/**\n * Namespace to interact with the task module-specific part of the SDK.\n * This object is usable only on the content frame.\n */\nexport namespace tasks {\n\n  /**\n   * Allows an app to open the task module.\n   * @param taskInfo An object containing the parameters of the task module\n   * @param submitHandler Handler to call when the task module is completed\n   */\n  export function startTask(\n    taskInfo: TaskInfo,\n    submitHandler?: (err: string, result: string) => void\n  ): IAppWindow {\n    ensureInitialized(frameContexts.content);\n\n    const messageId = sendMessageRequest(GlobalVars.parentWindow, \"tasks.startTask\", [\n      taskInfo\n    ]);\n    GlobalVars.callbacks[messageId] = submitHandler;\n    return new ChildAppWindow();\n  }\n\n  /**\n   * Update height/width task info properties.\n   * @param taskInfo An object containing width and height properties\n   */\n  export function updateTask(taskInfo: TaskInfo): void {\n    ensureInitialized(frameContexts.content, frameContexts.task);\n    const { width, height, ...extra } = taskInfo;\n\n    if (!Object.keys(extra).length) {\n      sendMessageRequest(GlobalVars.parentWindow, \"tasks.updateTask\", [taskInfo]);\n    } else {\n      throw new Error(\n        \"updateTask requires a taskInfo argument containing only width and height\"\n      );\n    }\n  }\n\n  /**\n   * Submit the task module.\n   * @param result Contains the result to be sent to the bot or the app. Typically a JSON object or a serialized version of it\n   * @param appIds Helps to validate that the call originates from the same appId as the one that invoked the task module\n   */\n  export function submitTask(\n    result?: string | object,\n    appIds?: string | string[]\n  ): void {\n    ensureInitialized(frameContexts.content, frameContexts.task);\n\n    // Send tasks.completeTask instead of tasks.submitTask message for backward compatibility with Mobile clients\n    sendMessageRequest(GlobalVars.parentWindow, \"tasks.completeTask\", [\n      result,\n      Array.isArray(appIds) ? appIds : [appIds]\n    ]);\n  }\n}"],"sourceRoot":""}